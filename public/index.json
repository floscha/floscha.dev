
[{"content":"","date":"28 August 2025","externalUrl":null,"permalink":"/","section":"floscha.dev","summary":"","title":"floscha.dev","type":"page"},{"content":"","date":"28 August 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":" Introduction # The other day, I listened to episode #398 Steve Jobs In His Own Words of the Founders podcast. This episode is a great summary of the book Make Something Wonderful. So in this post, I\u0026rsquo;ve summarized the core insights from Steve Jobs\u0026rsquo;s philosophy on work, life, and creativity, combined with some of his most impactful quotes.\nUse Mortality as a Driving Force # A central and recurring theme is the awareness of life\u0026rsquo;s brevity as a tool for clarity and motivation. Jobs believed that remembering you will die is the best way to avoid the trap of thinking you have something to lose. This frees you to follow your heart and intuition.\n\u0026ldquo;Think of your life as a rainbow arcing across the horizon of this world. You appear, have a chance to blaze in the sky and then you disappear\u0026hellip; To know my arc will fall makes me want to blaze while I\u0026rsquo;m in the sky.\u0026rdquo;\n\u0026ldquo;Your time is limited, so don\u0026rsquo;t waste it living someone else\u0026rsquo;s life.\u0026rdquo;\nProduct Creation is an Act of Love and Care # Jobs viewed making products not just as a commercial activity, but as a profound expression of appreciation for humanity. The goal wasn\u0026rsquo;t just to make a tool, but to imbue it with care, love, and a \u0026ldquo;spirit.\u0026rdquo; This contrasted sharply with his disdain for \u0026ldquo;third-rate products\u0026rdquo; that lacked taste and humanity.\n\u0026ldquo;One of the ways that I believe people express their appreciation to the rest of humanity is to make something wonderful and put it out there\u0026hellip; in the act of making something with a great deal of care and love, something\u0026rsquo;s transmitted there.\u0026rdquo;\nSee the World Not as It Is, but as It Ought to Be # Jobs\u0026rsquo;s gift was not just seeing what was there, but seeing what wasn\u0026rsquo;t there and what had to be there. He wasn\u0026rsquo;t constrained by current reality; he imagined a better one and then set out to create it. This is the essence of his \u0026ldquo;reality distortion field\u0026rdquo; and his belief in shaping the future.\n\u0026ldquo;His mind was never a captive of reality. Quite the contrary, he imagined what reality lacked and set out to remedy it.\u0026rdquo;\nThe World is Malleable and You Can Change It # A core part of his message was one of empowerment. He insisted that the world and the systems we live in were built by people no smarter than ourselves. This understanding is a license to not just accept the world as it is, but to improve it, change it, and influence it.\n\u0026ldquo;Everything that makes up what we call life was made by people no smarter and no more capable than we are. That our world is not fixed, and so we can change it for the better.\u0026rdquo;\nA Brand is a Core Value System, Not a Product Spec Sheet # Drawing inspiration from companies like Nike, Jobs understood that great marketing isn\u0026rsquo;t about listing features (\u0026ldquo;speeds and feeds\u0026rdquo;). It\u0026rsquo;s about communicating a core set of values. For Apple, that value was that \u0026ldquo;people with passion can change the world for the better.\u0026rdquo;\n\u0026ldquo;To me, marketing is about values\u0026hellip; Apple at its core, its core value is that we believe that people with passion can change the world for the better. That is what we believe.\u0026rdquo;\nMarry Technology with the Liberal Arts # A foundational strategic insight, learned from his mentor Edwin Land (founder of Polaroid), was that true breakthroughs happen at the intersection of technology and the humanities. This is why he valued beautiful typography and simple, elegant design as much as processing power.\n\u0026ldquo;His sense of the worlds that would emerge from marrying the arts and technology.\u0026rdquo;\nDemand Excellence, Starting with Yourself # Jobs held himself to a higher standard than he held anyone else. His \u0026ldquo;unbelievable rigor\u0026rdquo; was imposed first and most strenuously on himself. Only from that position could he demand the best from his team, creating an environment where excellence was expected.\n\u0026ldquo;Their expectations will never be higher than my own. Never, never, never\u0026hellip; You have to tell them straight. This isn\u0026rsquo;t good enough. I know you can do better. You need to do better. Now go and do better.\u0026rdquo;\nRecruiting is the Most Important Thing You Do # Jobs believed that quality starts with people and that finding \u0026ldquo;A-players\u0026rdquo; was half the battle. His management philosophy was to find people who shared the same core values and wanted to go to the same destination, then trust them to figure out the best way to get there.\n\u0026ldquo;Recruiting is the most important thing that you do\u0026hellip; finding the right people is half the battle.\u0026rdquo;\nContinuously Learn from the Best and Put Something Back # Jobs was a student of history, constantly looking to the \u0026ldquo;best things that humans have done\u0026rdquo; (from Walt Disney to Edwin Land and Bob Noyce) to inform his own work. He saw his work as a way to contribute back to the \u0026ldquo;pool of human experience\u0026rdquo; that he had drawn so much from.\n\u0026ldquo;I am totally dependent on [my species, living and dead] for my life and well-being\u0026hellip; and the ability to put something back into the pool of human experience is extremely neat.\u0026rdquo;\n","date":"28 August 2025","externalUrl":null,"permalink":"/posts/steve-jobs-philosophy/","section":"Posts","summary":"","title":"The Philosophy of Steve Jobs","type":"posts"},{"content":" Introduction # Today I listened to episode #399 How Elon Works of the Founders podcast, which I\u0026rsquo;m a frequent listener of. Host David Senra spent considerable time (re)reading the Walter Isaacson biography on Musk and for this episode extracted only the insights from the book that explain how Elon works.\nWhile you don\u0026rsquo;t have to agree with everything Elon Musk does or says (neither do I), there\u0026rsquo;s value in studying his operational methods. The following 9 principles represent a distilled approach to problem-solving and execution that has consistently delivered results across multiple industries. Whether you\u0026rsquo;re running a team, building a product, or tackling personal projects, these concepts can serve as inspiration for more effective operations.\nThe 9 Principles # ‚öôÔ∏è Execute the Algorithm: Question, Delete, Simplify, Accelerate, Automate # Musk operates his companies using a five-step process he calls \u0026ldquo;the algorithm,\u0026rdquo; which he repeats like a mantra. First, question every requirement, ensuring you know the specific person responsible for it, as all requirements are flawed. Second, delete any part or process you can; if you don\u0026rsquo;t end up adding at least 10% back later, you didn\u0026rsquo;t delete enough. Third, simplify and optimize the design, but only after you have deleted everything possible. Fourth, accelerate the cycle time of the remaining processes. Finally, and only at the very end, automate the process. He considers his biggest past mistake to be automating before completing the first four steps.\n‚è±Ô∏è A Maniacal Sense of Urgency is the Operating Principle # Time is the most critical and non-renewable resource. Every day of delay on a major project is seen as a massive financial and mission-critical loss. This belief dictates that impossibly aggressive timelines are necessary; if a timeline is long, it is wrong. This forces the team to innovate and bypass conventional thinking. As Musk says, \u0026ldquo;If you\u0026rsquo;re going through hell, just keep going.\u0026rdquo; This urgency applies to everything from building rockets to making decisions, as indecisiveness leads to failure.\nüéñÔ∏è Be a Frontline General and Go Directly to the Problem # A leader cannot be effective from a conference room. You must have direct, hands-on experience and be physically present where the work is happening. When a problem arises, you must \u0026ldquo;walk to the red\u0026rdquo; light on the factory floor, fly to the source, and engage directly with the people doing the work‚Äînot just their managers. Musk believes that just as Napoleon\u0026rsquo;s armies fought best where he was physically present, a leader\u0026rsquo;s presence on the front lines is what motivates troops and solves problems most effectively.\nüóëÔ∏è The Best Part is No Part: Relentlessly Delete and Simplify # The most significant source of progress comes from eliminating unnecessary parts, processes, and requirements. Every component is a potential point of failure and adds mass, cost, and complexity. This principle extends from questioning the need for fiberglass sound dampeners in a battery pack to challenging the need for plastic caps on battery prongs. He constantly asks why a part exists and forces his teams to justify its inclusion from a first-principles physics perspective, believing that the simplest solution is almost always the best one.\nüõ†Ô∏è Engineering Drives the Entire Process # The design, engineering, and manufacturing of a product cannot be separated into different departments. To do so is a \u0026ldquo;recipe for dysfunction.\u0026rdquo; Engineers must have their desks on the factory floor to feel the \u0026ldquo;immediate pain\u0026rdquo; of their design decisions, allowing for a rapid feedback loop. Product managers must understand code, and engineering leaders must have hands-on experience‚Äîlike a cavalry leader who knows how to ride a horse. This ensures that the people with the deepest technical understanding are leading and that practical manufacturing constraints directly inform the design from the very beginning.\nüî• Be Ultra Hardcore and Have an Unlimited Capacity for Pain # Revolutionizing industries is not for the faint of heart and requires a level of intensity greater than most people have ever experienced. Musk expects a 24/7, all-in commitment to the mission, not just from himself but from his entire team. He believes excellence is the capacity to take pain, having endured periods of extreme stress, night terrors, and physical illness when his companies were on the verge of collapse. This hardcore ethos prioritizes the mission above all else, including work-life balance and personal comfort.\nüìä Know the Details and the Idiot Index # Deep technical and financial knowledge is non-negotiable. A leader must understand the details of their own area better than anyone. To combat inefficiency, Musk uses the \u0026ldquo;idiot index\u0026rdquo;‚Äîthe ratio of a finished product\u0026rsquo;s cost to the cost of its raw materials. If the ratio is high, it means the manufacturing process is inefficient and ripe for innovation. He will grill employees on the idiot index of their components, believing that not knowing these fundamental numbers is grounds for termination.\nüé≠ Showmanship is Salesmanship # A powerful story or a dramatic demonstration is more effective than any PowerPoint presentation. From creating a fake server at Zip2 to impress investors to building a working, high-performance electric smart car prototype for Daimler executives in just a few weeks, Musk understands that selling a vision requires creating moments of magic and awe. This extends to product design, where unexpected and fun features‚Äîlike the \u0026ldquo;happy handshake\u0026rdquo; of a Model S door handle‚Äîcreate an emotional connection and generate organic excitement.\nüöÄ The Mission Comes Before Camaraderie # Being friends with your team is dangerous because it makes it hard to challenge their work and make tough decisions. Your duty is to the success of the overall enterprise, not to the feelings of the individual in front of you. A failure to address a problem or a poor performer to spare their feelings can lead to the failure of the entire company, which hurts everyone far more. Clear, direct, and often \u0026ldquo;hardcore\u0026rdquo; feedback is essential for progress, and physics does not care about feelings.\n","date":"26 August 2025","externalUrl":null,"permalink":"/posts/elon-musk-core-principles/","section":"Posts","summary":"","title":"Elon Musk's Core Principles","type":"posts"},{"content":"When trying to use the / symbol (Unicode U+002F) in the name of a TickTick list, you\u0026rsquo;ll encounter an error indicating that this character isn\u0026rsquo;t allowed. However, there\u0026rsquo;s an easy workaround: you can use the Ôºè symbol (Unicode U+FF0F) instead, which looks nearly identical but is permitted in TickTick.\n","date":"25 August 2025","externalUrl":null,"permalink":"/posts/slash-in-ticktick-list/","section":"Posts","summary":"","title":"Using the Slash Symbol in TickTick List Names","type":"posts"},{"content":" Introduction # I recently had the idea that the hero image from my homepage and my GitHub profile would be more engaging if it were animated instead of static. Since I\u0026rsquo;m not an expert in animation, I wondered if an image-to-video model like Google\u0026rsquo;s Veo could handle the animation task for me.\nThis post is a walkthrough for getting from my hero image below to an animated GIF of it.\nThe Steps # Correct the Aspect Ratio # Veo supports only two aspect ratios:\n16:9 9:16 Therefore, use an image editing tool (Photopea if you have nothing installed) and use the Canvas Size setting to change the ratio of your image to one of the above.\nMask Transparent Sections # Unfortunately, Veo doesn\u0026rsquo;t support transparency. If you upload an image with a transparent background, Veo will simply turn the transparent sections black. As a workaround, similar to green screens, we can mask the transparent sections with a dedicated color like green (#00FF00) and later remove this color during post-processing.\nUse Veo on AI Studio to Generate the Video # In Google AI Studio, go to Generate Media \u0026gt; Animated Scene For Looping. There, upload your image and add a prompt similar to this:\nMake the person on the image type. Make their eyes slightly go from side to side as when following text on the screen. Make the coffee cup steam. Gently wave the leaves of the plant from side to side. Make sure the video can be looped continuously. Finally, press run to generate the video and once it\u0026rsquo;s done, download the .mp4 file from AI Studio.\nConvert MP4 to GIF # With ffmpeg installed, run the command below to convert the .mp4 file to a .gif file.\nffmpeg -i input.mp4 -vf \u0026#34;fps=10,scale=480:-1:flags=lanczos\u0026#34; -c:v gif output.gif If you prefer an online tool, you can also use Ezgif from the next section in this post.\nMake Background Transparent Again # After unfortunately not getting ImageMagick to work with magick input.gif -transparent '#00ff00' output.gif, I decided to go with the online tool Ezgif.\nThere, you can go to Effects, upload an image, and go to the Remove background tab. In the Replace the background color with transparency section, select custom (HEX) with the value #00ff00 (or whatever color you chose as a transparency mask).\nYou\u0026rsquo;ll notice that the GIF will still have many green parts around the edges. This is because Veo also introduces some noise during the generation process. To deal with this, play around with the Fuzz % value (38 worked well in my case). Once you\u0026rsquo;re happy with the result, download the GIF from the Output image section.\nThe Result # This is what the final result looks like:\nUnfortunately, the GIF is still rough around the edges from the background removal, but other than that, I\u0026rsquo;m really pleased with the result.\n","date":"24 August 2025","externalUrl":null,"permalink":"/posts/google-veo-animated-gifs/","section":"Posts","summary":"","title":"Using Google Veo to Create Animated GIFs","type":"posts"},{"content":" Introduction # When building the Free Tabata app recently, it was immediately clear to me that this app was designed to be primarily used on mobile devices. While all such devices come with a pre-installed browser that can open the web app, the user experience isn\u0026rsquo;t guaranteed to match that of laptops or desktop computers, which come with a physical keyboard and larger screens.\nThis post serves as a collection of things to keep in mind when developing such apps.\nBe mindful of whitespace # While generous whitespace looks great on larger screens, it can easily become tedious on mobile devices when users have to constantly scroll to reach parts of the application, or when content isn\u0026rsquo;t even visible because it\u0026rsquo;s placed outside of the screen boundaries.\nDon\u0026rsquo;t rely on keys # Technically, it\u0026rsquo;s possible to connect a Bluetooth keyboard to mobile devices and use hotkeys. In practice, however, users rarely do this. Instead, make sure all functionality is accessible through taps and think of hotkeys only as a feature for power users.\nAdd an apple-touch-icon # One great trend in web apps recently is building them as Progressive Web Apps (PWAs). iOS devices, for example, provide an \u0026ldquo;Add to Home Screen\u0026rdquo; function that lets you add an icon to your home screen just like regular apps. This doesn\u0026rsquo;t use the site\u0026rsquo;s favicon, however, but requires a dedicated apple-touch-icon which can be included in HTML like so:\n\u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; href=\u0026#34;favicon.png\u0026#34;/\u0026gt; \u0026lt;/head\u0026gt; Tip: Sites like favicon.io make creating different favicon types much more convenient.\nConsider a Wake Lock # Usually, phones and tablets are configured to turn off their screens to save energy much sooner than desktop devices. This can prove especially annoying for use cases like Tabata training, where the screen should stay on for the multiple minutes of the workout.\nFortunately, modern browsers provide a Wake Lock API that can prevent the device from turning off its screen as long as the lock is active.\n","date":"22 August 2025","externalUrl":null,"permalink":"/posts/web-app-for-phones/","section":"Posts","summary":"","title":"Things to Keep in Mind When Building Web Apps for Phones","type":"posts"},{"content":" Motivation: The Value of Short, Effective Workouts # Finding time for regular exercise can be tough, especially when life gets busy. Tabata‚Äîa form of high-intensity interval training (HIIT)‚Äîmakes it possible to squeeze effective, energizing workouts into even the most hectic schedules. In fact, multiple studies show that HIIT sessions as short as six minutes can deliver not only impressive physical results but also cognitive benefits.\nWith these advantages in mind, I felt strongly that a high-quality Tabata app should be available to everyone, free of charge and without barriers.\nSolution: Building a Truly Free App # That\u0026rsquo;s why I created a Tabata app that\u0026rsquo;s completely free for anyone to use at free-tabata.com and works on both desktop and mobile devices. The app is also open source, so anyone is welcome to contribute, suggest improvements, or even fork the project to build their own version.\nI designed the app to be minimalistic and lightweight, built as a static website and hosted on GitHub Pages. This means there\u0026rsquo;s no backend to maintain and no ongoing costs for me (apart from the domain). As a result, I can keep the app sustainable and accessible without needing to monetize it.\nIf you\u0026rsquo;re searching for a simple, effective, and truly free Tabata timer, I invite you to give it a try. Your feedback and contributions are always welcome!\n","date":"20 August 2025","externalUrl":null,"permalink":"/posts/free-tabata/","section":"Posts","summary":"","title":"Why I Built a Free Tabata App","type":"posts"},{"content":" Introduction # The other day, I was wondering whether I could use AI to generate custom audiobooks based on existing documents like PDFs. While professionally recorded audiobooks already exist for most books, I wanted something more customizable where you could, for example, use only chapter summaries instead of the full chapters. I also wanted the audiobooks to be in the m4b format, which comes as a single file but still supports chapters for easier navigation (unlike wav or mp3).\nTo achieve this, I had to solve the following parts:\nExtract relevant content from the source text. Split the content into chapters. Create audio for each chapter. Merge all chapters into a single audiobook. The final project can be found on GitHub: floscha/gemini-audiobook-generator\nThe goal of this post isn\u0026rsquo;t to walk you through the full implementation but rather to discuss some things I found easier and some I found more challenging while developing this project.\nWhat Just Worked # Gemini API # To use Google\u0026rsquo;s Gemini AI models from Python code, you need a Gemini API key. Creating this key through Google AI Studio was really straightforward and required only one or two clicks.\nSimilarly, writing the Python code to call the models was effortless because of the excellent developer documentation, which has Python snippets ready for many practical use cases. These include processing text from PDF files and converting text to audio‚Äîexactly what I needed. Because of this, I was able to build the core AI logic within about 5 minutes.\nChallenges # Prompting # Writing the prompt to preprocess the source document into customized chapters turned out to be slightly more challenging than I initially thought.\nFor example, I use a simple heuristic where I take the first line of a chapter as the chapter name. Unfortunately, this doesn\u0026rsquo;t work for some formatting like the one below.\nChapter 1 Name of the Chapter To make the heuristic work, I added the following prompt:\nKeep the heading in a single line. This usually does the trick, but due to the probabilistic nature of LLMs, issues can still occur‚Äîfor example, dropping the Chapter 1 part of the example above.\nReusing Intermediate Files # While running the whole script from scratch might work for other tools, it\u0026rsquo;s much more practical to store intermediate files from which the script can recover in case of failure or to speed up experimentation during development.\nEven though the Gemini free tier is really generous, a medium-sized PDF file can quickly result in 100k tokens per request, leading to higher than desirable token consumption. Creating the audio files, on the other hand, wasn\u0026rsquo;t as token-expensive but took several minutes, leading to slower development speed.\nThe simple solution to this problem was to provide a keep_intermediate_files option that can be used during development. When turned on, intermediate files are kept, and when re-running the script, it recovers from those files rather than starting from scratch.\nMerging Audio Files # After the AI-specific code was implemented rather quickly, writing the code to merge the audio files for the individual chapters into a combined m4b file turned out to be much more tedious. This is mainly due to the fact that no Python library with this functionality exists.\nInstead, I had to fall back to using ffmpeg through subprocess calls. Even worse, this approach required generating lots of hacky metadata files through Python, which took me several tries to get right.\nFinally, I see the lack of a Python m4b converter as an opportunity to create one myself, which I might do in the near future.\n","date":"19 August 2025","externalUrl":null,"permalink":"/posts/building-an-audiobook-generator/","section":"Posts","summary":"","title":"Building an Audiobook Generator With Google Gemini","type":"posts"},{"content":" Introduction # Over the years, I have accumulated various scripts for smaller automations. One pretty trivial example is a script which takes the currently opened browser tab and stores the markdown link to this page (something like [Page Title](example.com)) in the clipboard.\nMost of these are written in Python but I neither want to spend time managing virtual environments nor global dependencies. Fortunately, uv scripts are an excellent tool for the job since they automatically create an virtual environment for the script but cache dependencies to not having to install all depencencies for every additional script.\nThe remaining question is how to launch those scripts. An obvious answer would be to use a terminal but opening an extra terminal window was too much friction for me (even when using Quake-like terminals such as Ghostty\u0026rsquo;s Quick Terminal). The perfect solution for me are Raycast\u0026rsquo;s Script Commands. Since I\u0026rsquo;m already using Raycast for many of its features, this didn\u0026rsquo;t require me to install additional software but instead allows me to run commands conveniently from a familiar interface.\nThis post will provide a full walkthrough on how to use uv and Raycast to launch arbitrary Python scripts using a command bar interface.\nPrerequisites # To use custom scripts with Raycast, all you have to do is tell it where those scripts are located. To do so, open Raycast Settings, Add New, Add Script Directory. Then, the directory on your machine where you want to store the files.\nCreating a new script # For new scripts, I always use the following template which covers all required boilerplate code and let\u0026rsquo;s you get straight to coding the actual functionality.\n#!/usr/bin/env -S uv run # # @raycast.schemaVersion 1 # @raycast.title Copy Markdown Link # @raycast.mode silent # # /// script # dependencies = [ # \u0026#34;some-dependency==1.0.0\u0026#34; # ] # /// # TODO: Put your code here! The first line makes it a uv script and lets you execute it with ./my_script.py instead of requiring to add python or uv run (make sure to adjust the permissions with chmod u+x my_script).\nNext, the comments with @raycast add the required metadata for the script to be run as a Raycast script:\n@raycast.schemaVersion adds the schema version and for the time being should always be 1. @raycast.title sets the title to be displayed in Raycast. @raycast.mode defines how the output of the script is displayed in Raycast. For details see Output Modes. Then, the /// script block is used by uv to define dependencies and the required Python version can also be set here. While exact versions for dependencies are optional, they are recommended to make the script more reproducible independent of what systems it is run on.\nBonus tip: Create a Raycast Snippet for the template to quickly create future scripts.\nUsing the script # When saving the script to the earlier defined script directory, Raycast will automatically find it by searching for the text you\u0026rsquo;ve used for @raycast.title. You can then also find it in Settings under Extensions where you can assign a hotkey to the script.\nFull Example # The following code shows the full implementation of the markdown link script I\u0026rsquo;ve mentioned in the introduction.\n#!/usr/bin/env -S uv run # # @raycast.schemaVersion 1 # @raycast.title Copy Markdown Link # @raycast.mode silent # # /// script # dependencies = [ # \u0026#34;sh\u0026#34;, # ] # /// from sh import osascript if __name__ == \u0026#34;__main__\u0026#34;: page_title = osascript(e=\u0026#39;tell application \u0026#34;Google Chrome\u0026#34; to get title of active tab of first window\u0026#39;).strip() page_url = osascript(e=\u0026#39;tell application \u0026#34;Google Chrome\u0026#34; to get URL of active tab of first window\u0026#39;).strip() markdown_link = f\u0026#34;[{page_title}]({page_url})\u0026#34; osascript(e=f\u0026#39;set the clipboard to \u0026#34;{markdown_link}\u0026#34;\u0026#39;) print(f\u0026#34;üìã Successfully copied {markdown_link} to clipboard.\u0026#34;) ","date":"17 August 2025","externalUrl":null,"permalink":"/posts/uv-scripts-with-raycast/","section":"Posts","summary":"","title":"Using uv Scripts with Raycast","type":"posts"},{"content":" Introduction # This post describes how I use several AI tools to help me study topics of any kind.\nFor this, I usually go through the following 3 steps:\nAssemble the learning material with GitHub Copilot Create cards with AI Studio Create audio summary with NotebookLM and AI Studio Assemble Learning Material # First, I collect all the study material I already have. For topics where I don\u0026rsquo;t have any material or just need a lot more, I use an agentic tool like GitHub Copilot, which I am most comfortable with as a software engineer. Also, running the agent locally has the benefit that you can easily split your material across multiple files instead of bundling it in a large response. In the future, however, I should also try this approach with other agentic tools like ChatGPT Deep Research.\nI then pass the agent a prompt similar to this:\nBased on the topics and subtopics represented as topics below, for each bullet, create a comprehensive section, explaining all related concepts in detail. Take your information from \u0026lt;some-related-website\u0026gt; and all sub pages. Create a markdown file for each topic. Place the markdown files in a \u0026lt;name-of-the-subject\u0026gt; folder. This leaves you with an organized number of markdown files which can already be used for studying by themselves.\nCreate Cards # Next, we use the markdown files to create flashcards for the Mochi app, which lets you easily import cards for studying using spaced repetition.\nThis can be achieved with the same local agent as above using this prompt:\nFor each topic markdown file, create flashcards in csv format, where the first column is the question and the second column the answer. Do not use headers. These CSV files can then be imported in Mochi using the Import menu and the CSV option. Make sure to set Quote to \u0026quot;.\nCreate Audio Summary # Create a new notebook for each topic in NotebookLM and either upload the markdown file or copy its content via Paste text \u0026gt; Copied text. Then, click on Audio Overview to create a podcast based on the imported study material.\nWhile the interaction of the two virtual podcast hosts can be entertaining, I often prefer a more concise single-speaker audio summary, which we can obtain using the following steps (inspired by Tina Huang):\nDownload the podcast audio file in the playback section of NotebookLM. Import the audio file in a tool like AI Studio. Transcribe it using a prompt like Accurately transcribe the uploaded podcast with two speakers. Do not use timestamps. Convert this transcript into a single host format and remove all extraneous information and commentary. Stay concise but do not remove any facts. Write it such that it can be read by a single speaker. Copy the output. Go to Generate Media \u0026gt; Generate speech and paste the output from the previous step. Wait until the generation has finished and either listen in AI Studio or download the audio to listen offline. ","date":"15 August 2025","externalUrl":null,"permalink":"/posts/study-with-ai/","section":"Posts","summary":"","title":"How I Study With AI","type":"posts"},{"content":" Introduction # As a fan of make-like tools such as just or Task and appreciating the guardrails provided by Git pre-commit, I dislike the redundancy of having to define commands like linting both in the justfile/taskfile as well as in the .pre-commit-config.yaml. To solve this, I\u0026rsquo;ve built a simple Git-native pre-commit hook which only delegates to a just recipe (in our case called lint) where all the checks are defined. While the following examples use just, they are easily adaptable to Task or even good old make.\nDefine just Recipe # As a prerequisite, we need a justfile which contains all the checks we expect to pass (meaning the commands results in a 0 return code), before a new Git commit can be created. For a Python codebase this could look like this:\nlint: just --fmt --unstable --check uvx ruff check uvx ruff format --check Set Up Pre-commit Hook # Within your repository, create a new file for the pre-commit hook using the editor of your choice. For VS Code, run\ntouch .git/hooks/pre-commit The pre-commit file should then have the following content.\n#!/bin/sh # Prevent commit if \u0026#39;just lint\u0026#39; recipe fails. if ! just lint; then echo \u0026#34;Pre-commit check failed!\u0026#34; exit 1 fi Finally, set the permissions such that the hook can be executed.\nchmod u+x .git/hooks/pre-commit Enable/Disable Hook # To disable the git hook, remove the permission to execute the script.\nchmod u-x .git/hooks/pre-commit Consequently, to re-enable the hook, add the permission again.\nchmod u+x .git/hooks/pre-commit Bonus: Putting Everything in a justfile # To not set up the pre-commit hook manually, you can also do this via a enable-pre-commit recipe.\nlint: just --fmt --unstable --check uvx ruff check uvx ruff format --check @enable-pre-commit: echo \u0026#39;#!/bin/sh\\n\\n# Prevent commit if \u0026#39;\\\u0026#39;\u0026#39;just lint\u0026#39;\\\u0026#39;\u0026#39; recipe fails.\\nif ! just lint; then\\n echo \u0026#34;Pre-commit check failed!\u0026#34;\\n exit 1\\nfi\u0026#39; \u0026gt; .git/hooks/pre-commit chmod u+x .git/hooks/pre-commit @echo \u0026#34;Pre-commit hook enabled.\u0026#34; @disable-pre-commit: chmod u-x .git/hooks/pre-commit @echo \u0026#34;Pre-commit hook disabled.\u0026#34; ","date":"14 August 2025","externalUrl":null,"permalink":"/posts/use-just-as-a-git-pre-commit-hook/","section":"Posts","summary":"","title":"Use just as a Git Pre-Commit Hook","type":"posts"},{"content":" Introduction # I\u0026rsquo;ve just switched my Hugo theme from PaperMod to PaperModX for the features listed on their repository. The steps to do so are pretty straightforward and listed below.\nMigration Steps # First, add the theme as a sub-module.\ngit submodule add https://github.com/reorx/hugo-PaperModX.git themes/PaperModX Then, change the Hugo theme to PaperModX.\nsed -i \u0026#39;\u0026#39; \u0026#39;s/^theme: PaperMod$/theme: PaperModX/\u0026#39; hugo.yaml Finally, delete the now unused PaperMod sub-module.\ngit rm themes/PaperMod ","date":"13 August 2025","externalUrl":null,"permalink":"/posts/migrate-to-papermodx/","section":"Posts","summary":"","title":"Migrate Hugo From PaperMod Theme to PaperModX","type":"posts"},{"content":" Introduction # While the Copilot team has taken measures to prohibit the agent from executing disastrous commands, auto approving commands will always hold an inherent risk.\nAuto Approve Everything # To auto approve all commands the agent intends to run, follow the steps below.\nOpen the VS Code setting with cmd + , In the Search settings text field, type chat auto approve Click the check box to enable the setting Again, in Search settings, type chat max requests For me, this setting was set at a default of 25 which was not sufficient for more sophisticated tasks, so I increased this value to 100 Auto Approve Selected Commands # As described in this GitHub issue, the Copilot agent now supports explicit enabling and disabling of commands:\n\u0026#34;chat.agent.terminal.autoApprove\u0026#34;: { \u0026#34;foo\u0026#34;: true, \u0026#34;bar\u0026#34;: false } ","date":"12 August 2025","externalUrl":null,"permalink":"/posts/github-copilot-auto-approve/","section":"Posts","summary":"","title":"Github Copilot Auto Approve","type":"posts"},{"content":" Introduction # The goal of today\u0026rsquo;s post is to dig into the Python\u0026rsquo;s functools.partial object.\nPartial Basics # Let\u0026rsquo;s start by importing partial from Python\u0026rsquo;s built-in functools.\n\u0026gt;\u0026gt;\u0026gt; from functools import partial Next, we define a simplistic multiply method and a times_two partial object which fixes the multiplier to always be 2.\n\u0026gt;\u0026gt;\u0026gt; def multiply(a: int, b: int) -\u0026gt; int: ... return a * b \u0026gt;\u0026gt;\u0026gt; times_two = partial(multiply, b=2) \u0026gt;\u0026gt;\u0026gt; times_two(3) 6 When inspecting the __name__ and __doc__ fields that regular Python methods always provide, we notice that for partial objects __name__ does not exists and __doc__ is set to some generic partial object default. So to have sensible values for the two fields, we have to set those ourselves.\n\u0026gt;\u0026gt;\u0026gt; times_two.__name__ Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; AttributeError: \u0026#39;functools.partial\u0026#39; object has no attribute \u0026#39;__name__\u0026#39;. Did you mean: \u0026#39;__ne__\u0026#39;? \u0026gt;\u0026gt;\u0026gt; times_two.__name__ = \u0026#39;times_two\u0026#39; \u0026gt;\u0026gt;\u0026gt; times_two.__name__ \u0026#39;times_two\u0026#39; \u0026gt;\u0026gt;\u0026gt; times_two.__doc__ \u0026#39;partial(func, *args, **keywords) - new function with partial application\\n of the given arguments and keywords.\\n\u0026#39; \u0026gt;\u0026gt;\u0026gt; times_two.__doc__ = \u0026#39;Multiply the given value times two.\u0026#39; \u0026gt;\u0026gt;\u0026gt; times_two.__doc__ \u0026#39;Multiply the given value times two.\u0026#39; When printing our times_two partial we get the name of the class together with a reference to the original method and the arguments that we\u0026rsquo;ve fixed for our partial.\n\u0026gt;\u0026gt;\u0026gt; times_two functools.partial(\u0026lt;function multiply at 0x101358900\u0026gt;, b=2) We can also get those latter two explicitly, using the .func and keywords fields of partial.\n\u0026gt;\u0026gt;\u0026gt; times_two.func \u0026lt;function multiply at 0x101358900\u0026gt; \u0026gt;\u0026gt;\u0026gt; times_two.keywords {\u0026#39;b\u0026#39;: 2} If we had used partial with non-keyword arguments (like partial(multiply, 2), which would\u0026rsquo;ve set a to 2), those values would show up in the .args field. Since we\u0026rsquo;ve only used keyword arguments however, args will be an empty tuple in our case.\n\u0026gt;\u0026gt;\u0026gt; times_two.args () Partial With Types # If we ask Python for the type of the partial, it will simply tell us it\u0026rsquo;s a functools.partial object.\n\u0026gt;\u0026gt;\u0026gt; type(times_two) \u0026lt;class \u0026#39;functools.partial\u0026#39;\u0026gt; And while we can get the argument names with their types as well the return type from a regular Python method using \u0026lt;method_name\u0026gt;.__annotations__, this dunder method is not provided for partial objects.\n\u0026gt;\u0026gt;\u0026gt; times_two.__annotations__ Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; AttributeError: \u0026#39;functools.partial\u0026#39; object has no attribute \u0026#39;__annotations__\u0026#39; However, we can retrieve the same output using the simple dict comprehension below.\n\u0026gt;\u0026gt;\u0026gt; {k: v for k, v in times_two.func.__annotations__.items() if k not in times_two.keywords} {\u0026#39;a\u0026#39;: \u0026lt;class \u0026#39;int\u0026#39;\u0026gt;, \u0026#39;return\u0026#39;: \u0026lt;class \u0026#39;int\u0026#39;\u0026gt;} ","date":"11 August 2025","externalUrl":null,"permalink":"/posts/exploring-functools-partial/","section":"Posts","summary":"","title":"Exploring functools.partial","type":"posts"},{"content":"Hello world, hej v√§rlden!\n","date":"10 August 2025","externalUrl":null,"permalink":"/posts/hello-world/","section":"Posts","summary":"","title":"Hello World","type":"posts"},{"content":"Some things about me\u0026hellip;\nCertifications # Some of the certifications, I\u0026rsquo;ve acquired recently in the fields of data engineering and solution architecture.\nAWS Certified Solutions Architect ‚Äì Professional AWS Certified Data Engineer ‚Äì Associate Databricks Certified Data Engineer Professional [dbt Engineer] [dbt Architect] ","externalUrl":null,"permalink":"/about/","section":"floscha.dev","summary":"","title":"About me","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]