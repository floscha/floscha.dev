<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>floscha.dev</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on floscha.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Migrate Hugo From PaperMod Theme to PaperModX</title>
      <link>http://localhost:1313/posts/migrate-to-papermodx/</link>
      <pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/migrate-to-papermodx/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve just switched my Hugo theme from &lt;a href=&#34;https://github.com/adityatelange/hugo-PaperMod&#34;&gt;PaperMod&lt;/a&gt; to &lt;a href=&#34;https://github.com/reorx/hugo-PaperModX&#34;&gt;PaperModX&lt;/a&gt; for the features listed on their repository.
The steps to do so are pretty straightforward and listed below.&lt;/p&gt;
&lt;h2 id=&#34;migration-steps&#34;&gt;Migration Steps&lt;/h2&gt;
&lt;p&gt;First, add the theme as a sub-module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/reorx/hugo-PaperModX.git themes/PaperModX
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, change the Hugo theme to &lt;code&gt;PaperModX&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^theme: PaperMod$/theme: PaperModX/&amp;#39;&lt;/span&gt; hugo.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, delete the now unused &lt;code&gt;PaperMod&lt;/code&gt; sub-module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git rm themes/PaperMod
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;ve just switched my Hugo theme from <a href="https://github.com/adityatelange/hugo-PaperMod">PaperMod</a> to <a href="https://github.com/reorx/hugo-PaperModX">PaperModX</a> for the features listed on their repository.
The steps to do so are pretty straightforward and listed below.</p>
<h2 id="migration-steps">Migration Steps</h2>
<p>First, add the theme as a sub-module.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git submodule add https://github.com/reorx/hugo-PaperModX.git themes/PaperModX
</span></span></code></pre></div><p>Then, change the Hugo theme to <code>PaperModX</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sed -i <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#e6db74">&#39;s/^theme: PaperMod$/theme: PaperModX/&#39;</span> hugo.yaml
</span></span></code></pre></div><p>Finally, delete the now unused <code>PaperMod</code> sub-module.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git rm themes/PaperMod
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Github Copilot Auto Approve</title>
      <link>http://localhost:1313/posts/github-copilot-auto-approve/</link>
      <pubDate>Tue, 12 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/github-copilot-auto-approve/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;While the Copilot team has taken &lt;a href=&#34;https://github.com/microsoft/vscode/issues/252496#issuecomment-3127077875&#34;&gt;measures&lt;/a&gt; to prohibit the agent from executing disastrous commands, auto approving commands will always hold an inherent risk.&lt;/p&gt;
&lt;h2 id=&#34;auto-approve-everything&#34;&gt;Auto Approve Everything&lt;/h2&gt;
&lt;p&gt;To auto approve all commands the agent intends to run, follow the steps below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the VS Code setting with &lt;code&gt;cmd&lt;/code&gt; + &lt;code&gt;,&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Search settings&lt;/em&gt; text field, type &lt;code&gt;chat auto approve&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Click the check box to enable the setting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Again, in &lt;em&gt;Search settings&lt;/em&gt;, type &lt;code&gt;chat max requests&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;For me, this setting was set at a default of &lt;code&gt;25&lt;/code&gt; which was not sufficient for more sophisticated tasks, so I increased this value to &lt;code&gt;100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;auto-approve-selected-commands&#34;&gt;Auto Approve Selected Commands&lt;/h2&gt;
&lt;p&gt;As described in &lt;a href=&#34;https://github.com/microsoft/vscode/issues/252496#issuecomment-3107360161&#34;&gt;this GitHub issue&lt;/a&gt;, the Copilot agent now supports explicit enabling and disabling of commands:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>While the Copilot team has taken <a href="https://github.com/microsoft/vscode/issues/252496#issuecomment-3127077875">measures</a> to prohibit the agent from executing disastrous commands, auto approving commands will always hold an inherent risk.</p>
<h2 id="auto-approve-everything">Auto Approve Everything</h2>
<p>To auto approve all commands the agent intends to run, follow the steps below.</p>
<ul>
<li>Open the VS Code setting with <code>cmd</code> + <code>,</code></li>
<li>In the <em>Search settings</em> text field, type <code>chat auto approve</code>
<ul>
<li>Click the check box to enable the setting</li>
</ul>
</li>
<li>Again, in <em>Search settings</em>, type <code>chat max requests</code>
<ul>
<li>For me, this setting was set at a default of <code>25</code> which was not sufficient for more sophisticated tasks, so I increased this value to <code>100</code></li>
</ul>
</li>
</ul>
<h2 id="auto-approve-selected-commands">Auto Approve Selected Commands</h2>
<p>As described in <a href="https://github.com/microsoft/vscode/issues/252496#issuecomment-3107360161">this GitHub issue</a>, the Copilot agent now supports explicit enabling and disabling of commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span><span style="color:#e6db74">&#34;chat.agent.terminal.autoApprove&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;foo&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;bar&#34;</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Exploring functools.partial</title>
      <link>http://localhost:1313/posts/exploring-functools-partial/</link>
      <pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/exploring-functools-partial/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The goal of today&amp;rsquo;s post is to dig into the Python&amp;rsquo;s &lt;code&gt;functools.partial&lt;/code&gt; object.&lt;/p&gt;
&lt;h2 id=&#34;partial-basics&#34;&gt;Partial Basics&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start by importing &lt;code&gt;partial&lt;/code&gt; from Python&amp;rsquo;s built-in &lt;code&gt;functools&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; functools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; partial
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we define a simplistic &lt;code&gt;multiply&lt;/code&gt; method and a &lt;code&gt;times_two&lt;/code&gt; &lt;code&gt;partial&lt;/code&gt; object which fixes the multiplier to always be &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiply&lt;/span&gt;(a: int, b: int) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; int:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; times_two &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; partial(multiply, b&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; times_two(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When inspecting the &lt;code&gt;__name__&lt;/code&gt; and &lt;code&gt;__doc__&lt;/code&gt; fields that regular Python methods always provide, we notice that for partial objects &lt;code&gt;__name__&lt;/code&gt; does not exists and &lt;code&gt;__doc__&lt;/code&gt; is set to some generic &lt;code&gt;partial&lt;/code&gt; object default.
So to have sensible values for the two fields, we have to set those ourselves.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The goal of today&rsquo;s post is to dig into the Python&rsquo;s <code>functools.partial</code> object.</p>
<h2 id="partial-basics">Partial Basics</h2>
<p>Let&rsquo;s start by importing <code>partial</code> from Python&rsquo;s built-in <code>functools</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#f92672">from</span> functools <span style="color:#f92672">import</span> partial
</span></span></code></pre></div><p>Next, we define a simplistic <code>multiply</code> method and a <code>times_two</code> <code>partial</code> object which fixes the multiplier to always be <code>2</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">multiply</span>(a: int, b: int) <span style="color:#f92672">-&gt;</span> int:
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>     <span style="color:#66d9ef">return</span> a <span style="color:#f92672">*</span> b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two <span style="color:#f92672">=</span> partial(multiply, b<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two(<span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">6</span>
</span></span></code></pre></div><p>When inspecting the <code>__name__</code> and <code>__doc__</code> fields that regular Python methods always provide, we notice that for partial objects <code>__name__</code> does not exists and <code>__doc__</code> is set to some generic <code>partial</code> object default.
So to have sensible values for the two fields, we have to set those ourselves.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two<span style="color:#f92672">.</span>__name__
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">AttributeError</span>: <span style="color:#e6db74">&#39;functools.partial&#39;</span> object has no attribute <span style="color:#e6db74">&#39;__name__&#39;</span><span style="color:#f92672">.</span> Did you mean: <span style="color:#e6db74">&#39;__ne__&#39;</span><span style="color:#960050;background-color:#1e0010">?</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two<span style="color:#f92672">.</span>__name__ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;times_two&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two<span style="color:#f92672">.</span>__name__
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;times_two&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two<span style="color:#f92672">.</span>__doc__
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;partial(func, *args, **keywords) - new function with partial application</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">    of the given arguments and keywords.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two<span style="color:#f92672">.</span>__doc__ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Multiply the given value times two.&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two<span style="color:#f92672">.</span>__doc__
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;Multiply the given value times two.&#39;</span>
</span></span></code></pre></div><p>When printing our <code>times_two</code> partial we get the name of the class together with a reference to the original method and the arguments that we&rsquo;ve fixed for our <code>partial</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two
</span></span><span style="display:flex;"><span>functools<span style="color:#f92672">.</span>partial(<span style="color:#f92672">&lt;</span>function multiply at <span style="color:#ae81ff">0x101358900</span><span style="color:#f92672">&gt;</span>, b<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span></code></pre></div><p>We can also get those latter two explicitly, using the <code>.func</code> and <code>keywords</code> fields of <code>partial</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two<span style="color:#f92672">.</span>func
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span>function multiply at <span style="color:#ae81ff">0x101358900</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two<span style="color:#f92672">.</span>keywords
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;b&#39;</span>: <span style="color:#ae81ff">2</span>}
</span></span></code></pre></div><p>If we had used <code>partial</code> with non-keyword arguments (like <code>partial(multiply, 2)</code>, which would&rsquo;ve set <code>a</code> to <code>2</code>), those values would show up in the <code>.args</code> field.
Since we&rsquo;ve only used keyword arguments however, <code>args</code> will be an empty tuple in our case.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two<span style="color:#f92672">.</span>args
</span></span><span style="display:flex;"><span>()
</span></span></code></pre></div><h2 id="partial-with-types">Partial With Types</h2>
<p>If we ask Python for the type of the partial, it will simply tell us it&rsquo;s a <code>functools.partial</code> object.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> type(times_two)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">functools</span><span style="color:#f92672">.</span>partial<span style="color:#e6db74">&#39;&gt;</span>
</span></span></code></pre></div><p>And while we can get the argument names with their types as well the return type from a regular Python method using <code>&lt;method_name&gt;.__annotations__</code>, this dunder method is not provided for <code>partial</code> objects.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> times_two<span style="color:#f92672">.</span>__annotations__
</span></span><span style="display:flex;"><span>Traceback (most recent call last):
</span></span><span style="display:flex;"><span>  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">AttributeError</span>: <span style="color:#e6db74">&#39;functools.partial&#39;</span> object has no attribute <span style="color:#e6db74">&#39;__annotations__&#39;</span>
</span></span></code></pre></div><p>However, we can retrieve the same output using the simple dict comprehension below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">&gt;&gt;&gt;</span> {k: v <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> times_two<span style="color:#f92672">.</span>func<span style="color:#f92672">.</span>__annotations__<span style="color:#f92672">.</span>items() <span style="color:#66d9ef">if</span> k <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> times_two<span style="color:#f92672">.</span>keywords}
</span></span><span style="display:flex;"><span>{<span style="color:#e6db74">&#39;a&#39;</span>: <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">int</span><span style="color:#e6db74">&#39;&gt;, &#39;</span><span style="color:#66d9ef">return</span><span style="color:#e6db74">&#39;: &lt;class &#39;</span>int<span style="color:#e6db74">&#39;&gt;}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://localhost:1313/posts/hello-world/</link>
      <pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/hello-world/</guid>
      <description>&lt;p&gt;Hello world, hej världen!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Hello world, hej världen!</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
